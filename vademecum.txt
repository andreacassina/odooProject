LINK TUTORIALS INSTALLAZIONE:
	https://www.odoo.com/documentation/17.0/contributing/development.html
	https://www.odoo.com/documentation/17.0/administration/on_premise/source.html

LINK TUTORIALS FRAMEWORK:
	https://www.odoo.com/documentation/17.0/developer/tutorials/server_framework_101/01_architecture.html
	https://www.odoo.com/documentation/17.0/developer/tutorials/server_framework_101/02_newapp.html
	https://www.odoo.com/documentation/17.0/developer/tutorials/server_framework_101/03_basicmodel.html
	https://www.odoo.com/documentation/17.0/developer/tutorials/server_framework_101/04_securityintro.html
	https://www.odoo.com/documentation/17.0/developer/tutorials/server_framework_101/05_firstui.html
	https://www.odoo.com/documentation/17.0/developer/tutorials/server_framework_101/06_basicviews.html
	https://www.odoo.com/documentation/17.0/developer/tutorials/server_framework_101/07_relations.html
	https://www.odoo.com/documentation/17.0/developer/tutorials/server_framework_101/08_compute_onchange.html

TUTORIALS FRAMEWORK

	SETUP GUIDE:

	python3 odoo-bin --addons-path="addons/,../tutorials"

	Per creare una nuova categoria di add-on basta fare una cartella fuori da OdooProject (es tutorials) e specificare il path(../nome-cartella) negli addons da linea di comando
	Esempio: python3 odoo-bin --addons-path="addons/,../tutorials" (-d rd-demo)

	PYTHON DEBUGGING
		import ipdb; 
		ipdb.set_trace()
		https://www.odoo.com/documentation/17.0/developer/tutorials/setup_guide.html#python-debugging

	###
	CAPITOLO 2: https://www.odoo.com/documentation/17.0/developer/tutorials/server_framework_101/02_newapp.html
	###

	Un modulo Odoo è dichiarato dal suo manifest
	https://www.odoo.com/documentation/17.0/developer/reference/backend/module.html#reference-module-manifest

	All'interno di ogni modulo (cartella) devono esserci 2 file:
	- __manifest__.py (esempio https://github.com/odoo/odoo/blob/fc92728fb2aa306bf0e01a7f9ae1cfa3c1df0e10/addons/crm/__manifest__.py#L1-L67)
	- __init__.py (vedi dopo)

	###
	CAPITOLO 3: https://www.odoo.com/documentation/17.0/developer/tutorials/server_framework_101/03_basicmodel.html
	###

	Link documentazione Model ORM: https://www.odoo.com/documentation/17.0/developer/reference/backend/orm.html#reference-orm-model

	Tutti i modelli vanno inseriti nella cartella models
	In <nome-add-on>/models/<nome-classe>.py definisco il modello (campi, etc)
	Il file <nome-classe>.py deve essere importato in <nome-add-on>/models/__init__.py 
	La cartella models deve essere importata in <nome-add-on>/__init__-py

	Esempio di modello (CRM): https://github.com/odoo/odoo/blob/e80911aaead031e7523173789e946ac1fd27c7dc/addons/crm/models/crm_recurring_plan.py#L1-L9

	Dopo aver creato il modello bisogna riavviare il server con il comando python3 odoo-bin --addons-path="addons/,../tutorials" -d <nome-db> -u <nome-add-on>

	###
	CAPITOLO 4: https://www.odoo.com/documentation/17.0/developer/tutorials/server_framework_101/04_securityintro.html
	###

	Quando necessito di importare un file lo devo aggiungere in una delle seguenti cartelle:
	- data: file generici
	- views: file che sono relativi alle viste
	- security: file che sono relativi alla sicurezza
	Dopodichè il percorso del file va aggiunto nel manifest nella variabile data
	I file sono caricati sequenzialmente, quindi se un file fa riferimento ad un altro quest'ultimo va specificato prima nella variabile data.

	Per specificare i permessi sulla tabella che rappresenta il modello bisogna specificare nel file security/ir.model.access.csv i seguenti parametri:
	id,name,model_id/id,group_id/id,perm_read,perm_write,perm_create,perm_unlink
	- id: access_<nome_modello>
	- name: access_<nome_modello>
	- model_id: model_<nome-modello>
	- group_id: il gruppo che può modificarlo (ad es. base.group_user)
	- perm_read,perm_write,perm_create,perm_unlink: 0 per dare permesso o 1 per NON dare permesso 
	
	###
	CAPITOLO 5: https://www.odoo.com/documentation/17.0/developer/tutorials/server_framework_101/05_firstui.html
	###

	Azioni e menù sono record standard nel DB
	La UI in Odoo può seguire il pattern standard Menu > Action > View:
	- L'utente naviga i menù per accedere ai record
	- Il livello più basso è un'azione che triggera l'apertura di una lista di record (view)

	Ci sono 3 modi di triggerare le azioni:
	- Cliccando sugli oggetti del menù (collegati a specifiche azioni) (questa lezione)
	- Cliccando bottoni nelle views (Lezione 6)
	- Come azione contestuale in oggetti ()

	La vista è dichiarata tramite file <nome_classe>_views.xml che va inserito nella cartella views (e dichiarato nel manifest)
	All'interno del file views/<nome_classe>.xml una struttura può essere la seguente:
	<odoo>
		<record id="estate_property_first_menu" model="ir.actions.act_window">
			<field name="name"><nome_azione></field>
			<field name="res_model"><modello_di_riferimento></field>
			<field name="view_mode"><tree,form></field>
		</record>
	</odoo>
	- id: identificativo esterno
	- model: sempre ir.actions.act_window
	- name: nome dell'azione
	- res_model: modello a cui l'azione verrà applicata
	- view_mode: viste che saranno disponibili: tree = lista, form = form (ce ne possono essere anche altre)
	
	Esempio di vista (CRM): https://github.com/odoo/odoo/blob/09c59012bf80d2ccbafe21c39e604d6cfda72924/addons/crm/views/crm_lost_reason_views.xml#L57-L70

	Un modo rapido per creare un menù è utilizzare una shorcut come di seguito:
	<odoo>
		<menuitem id="estate_menu_root" name="Estate">
			<menuitem id="estate_first_level_menu" name="Estate - First Level">
				<menuitem id="estate_property_menu_action" action="estate_property_action"/>
			</menuitem>
		</menuitem>
	</odoo>
	Il menù è così linkato all'azione creata in precedenza.

	I menù seguono sempre una un'architettura a 3 livelli:
	- Root Menù mostrato nell'App Switcher
	- Il menù di 1°livello mostrato nella barra in alto
	- I menù delle azioni

	Personalizzare le view: in genere vogliamo
	- campi con valore di default (default=... nel modello)
	- campi in sola lettura (readonly=True nel modello)
	- campi che non sono copiati quando il record viene duplicato (copy=False nel modello)

	Il campo active (Booleano) definisce se il record è attivo o no.
	Un record non attivo non verrà visualizzato nella vista se non quando imposto con i filtri la sua visualizzazione (active is set).
	Perciò di default andrebbe inserito nella classe come di seguito:
	active = fields.Boolean(default=True)

	Quando specifico il valore di default di un campo di tipo Selection, devo specificare la chiave (Selection è definita come ('key', 'Value'))

	###
	CAPITOLO 6: https://www.odoo.com/documentation/17.0/developer/tutorials/server_framework_101/06_basicviews.html
	###

	Lista personalizzata (Tree):
	<field name="arch" type="xml">
		<tree string="Channel" editable="bottom">
			<field name="name"/>
		</tree>
	</field>

	Form personalizzata (Form):
	<field name="arch" type="xml">
		<form string="Test">
			<sheet>
				<group>
					<group>
						<field name="name"/>
					</group>
					<group>
						<field name="last_seen"/>
					</group>
				</group>
				<notebook>
					<page string="Description">
						<field name="description"/>
					</page>
				</notebook>
			</sheet>
		</form>
	</field>

	Esempio CRM: https://github.com/odoo/odoo/blob/6da14a3aadeb3efc40f145f6c11fc33314b2f15e/addons/crm/views/crm_lost_reason_views.xml#L46-L54

	Search personalizzata (Search):
	<field name="arch" type="xml">
		<search string="Tests">
			<field name="name"/>
			<field name="last_seen"/>
			<separator/>
			<filter name="Available Properties" domain="['|', ('state', '=', 'new'), ('state', '=', 'offer received')]"/>
			<group string="Group By">
				<filter string="Postcode" name="postcode" context="{'group_by':'postcode'}"/>
			</group>
		</search>
	</field>

	Le viste Search posso anche contenere il tag <filter>, che agisce da toggle per ricerche predefinite
	I filtri devono avere uno dei seguenti attributi:
	- domain: è una lista di criteri utilizzato per seleczionale un sottoset di record del modello. 
			  ogni criterio è una tripletta (nome_campo, operatore, valore)
	- context: aggiunge del contesto alla ricerca corrente; usa la chiave group_by per raggruppare i risultati sul dato campo
	
	Esempio Search: https://github.com/odoo/odoo/blob/715a24333bf000d5d98b9ede5155d3af32de067c/addons/delivery/views/delivery_view.xml#L30-L44

	###
	CAPITOLO 7: https://www.odoo.com/documentation/17.0/developer/tutorials/server_framework_101/07_relations.html
	###

	Relazione 1-N: dal lato N introduco un campo del tipo fields.Many2one("<nome_modello>")

	relazione N-N: dal lato "principale" introduco un campo del tipo fields.Many2many("<nome_modello>")
	Si comporta come un recordset ovvero una collezione ordinata 

	relazione N-1: dal lato 1 si introduce un campo del tipo fields.one2Many("<nome_modello>", "<nome_campo>")
	Per esser presente una 1 a N dal lato N deve essere presente una N a 1

	###
	CAPITOLO 8: https://www.odoo.com/documentation/17.0/developer/tutorials/server_framework_101/08_compute_onchange.html
	###

	Per creare un campo calcolato, bisogna creare un campo e settare l'attributo compute col nome di un metodo.
	Il metodo di computazione deve settare il valore del campo computato per ogni record in self.
	I metodi di computazione sono privati (iniziano con _) così che non possano essere chiamati dal presentation tier ma solo da business tier.
	L'ORM si aspetto che vengano specificate le dipendenze sui campi computati con il decoratore depends().
	L'oggetto self indica tutti i record della tabella quindi è necessario effettuare un ciclo.
	Esempio (campo total dipendente da amount): 
	from odoo import api
	...
	total = fields.Float(compute="_compute_total")
    amount = fields.Float()

	@api.depends("amount")
	def _compute_total(self):
		for record in self:
				record.total = 2.0 * record.amount

	Altri esempi: https://github.com/odoo/odoo/blob/713dd3777ca0ce9d121d5162a3d63de3237509f4/addons/account/models/account_move.py#L3420-L3423

	Per accedere a campi "riferimento" la sintassi è la seguente:
	...
	partner_id = fields.Many2one("res.partner")

	@api.depends("partner_id.name")
	def _compute_description(self):
		for record in self:
			record.description = "Test for partner %s" % record.partner_id.name

	Se voglio che due campi si influenzino a vicenda (esempio: giorni di validità, data di validità) devo utilizzare una inverse function:
	...
	total = fields.Float(compute="_compute_total", inverse="_inverse_total")
    amount = fields.Float()

    @api.depends("amount")
    def _compute_total(self):
        for record in self:
            record.total = 2.0 * record.amount

    def _inverse_total(self):
        for record in self:
            record.amount = record.total / 2.0

	Per aggiungere ai campi di ricerca un campo computato bisogna dichiarare la funzione search oppure aggiungere l'attributo store=True.
	Esempio Search: https://github.com/odoo/odoo/blob/f011c9aacf3a3010c436d4e4f408cd9ae265de1b/addons/event/models/event_event.py#L188

	Se vogliamo implementare comportamenti onchange bisogna utilizzare la seguente sintassi (self indica il record).
	...
	@api.onchange("partner_id")
    def _onchange_partner_id(self):
        self.name = "Document for %s" % (self.partner_id.name)
        self.description = "Default description for %s" % (self.partner_id.name)